public static fruktiEntities context;
        internal static object CurrentUser;
        public static fruktiEntities GetContext()
        {
            if (context == null)
            {
                context = new Models.fruktiEntities();
            }
            return context;
        }

public partial class merch
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public merch()
        {
            this.sostav = new HashSet<sostav>();
        }

        public int id { get; set; }
        public string photo { get; set; }
        public string name { get; set; }
        public string dexcription { get; set; }
        public string manufacturer { get; set; }
        public int price { get; set; }
        public Nullable<int> discount { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<sostav> sostav { get; set; }
        public bool TextColor
        {
            get
            {
                if (Convert.ToDouble(discount) != 0) return true;
                else return false;
            }
        }
        public string Arrow
        {
            get
            {
                if (TextColor) return "Strikethrough";
                else return "None";
            }

        }
        public string newcost
        {
            get
            {
                if (TextColor) return Convert.ToString((Convert.ToDouble(price)) - Convert.ToDouble(price) * Convert.ToDouble(discount) / 100);
                else return "";
            }

        }
    }
}
public partial class orders
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public orders()
        {
            this.sostav = new HashSet<sostav>();
        }

        public int id { get; set; }
        public int id_users { get; set; }
        public int id_status { get; set; }
        public int id_point { get; set; }
        public System.DateTime order_date { get; set; }
        public int code { get; set; }
        public int cost { get; set; }
        public Nullable<int> discount { get; set; }
        public Nullable<int> total_cost { get; set; }
        public Nullable<int> delivery_days { get; set; }

        public virtual point point { get; set; }
        public virtual status status { get; set; }
        public virtual users users { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<sostav> sostav { get; set; }
        public bool TextColor
        {
            get
            {
                if (Convert.ToDouble(discount) != 0) return true;
                else return false;
            }
        }
        public string Arrow
        {
            get
            {
                if (TextColor) return "Strikethrough";
                else return "None";
            }

        }
        public string newcost
        {
            get
            {
                if (TextColor) return Convert.ToString((Convert.ToDouble(cost)) - Convert.ToDouble(cost) * Convert.ToDouble(discount) / 100);
                else return "";
            }

        }
    }
}